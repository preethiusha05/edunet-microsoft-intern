# -*- coding: utf-8 -*-
"""Untitled25.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YvrMEIZZ0WxcGoSTz7j4Lk2sjgn25e10
"""

!pip install yfinance
!pip install --upgrade keras

import yfinance as yf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import LSTM, Dense

# Get stock data (e.g., Apple)
ticker = 'AAPL'
data = yf.download(ticker, start='2015-01-01', end='2023-12-31')
print(data.head())

# Use only the 'Close' price
close_data = data[['Close']].values

# Normalize data between 0 and 1
scaler = MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(close_data)

# Create sequences for LSTM
X, y = [], []
sequence_length = 60

for i in range(sequence_length, len(scaled_data)):
    X.append(scaled_data[i-sequence_length:i])
    y.append(scaled_data[i])

X, y = np.array(X), np.array(y)

# Reshape input for LSTM: [samples, time_steps, features]
X = np.reshape(X, (X.shape[0], X.shape[1], 1))

model = Sequential()
model.add(LSTM(units=50, return_sequences=True, input_shape=(X.shape[1], 1)))
model.add(LSTM(units=50))
model.add(Dense(units=1))  # Output layer

model.compile(optimizer='adam', loss='mean_squared_error')
model.summary()

model.fit(X, y, epochs=10, batch_size=32)

# Prepare test data (last 60 days of training data)
test_input = scaled_data[-sequence_length:]
test_input = np.reshape(test_input, (1, test_input.shape[0], 1))

# Predict the next day
predicted_price = model.predict(test_input)
predicted_price = scaler.inverse_transform(predicted_price)

print(f"Predicted next day's price for {ticker}: ${predicted_price[0][0]:.2f}")

# Plot actual vs predicted price
plt.figure(figsize=(10, 5))
plt.plot(data['Close'], label='Actual Price')
plt.axhline(y=predicted_price[0][0], color='r', linestyle='--', label='Predicted Next Day')
plt.title(f'{ticker} Stock Price Prediction')
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()
plt.show()

model.save("stock_lstm_model.h5")

from google.colab import files
files.download("stock_lstm_model.h5")

print(f"Predicted next day's price for {ticker}: ${predicted_price[0][0]:.2f}")

features = data[['Open', 'High', 'Low', 'Close', 'Volume']]

for _ in range(7):
    next_input = ...

# Prepare data for output file
predicted_price_value = predicted_price[0][0]
last_date = data.index[-1]  # last date in dataset
output_df = pd.DataFrame({
    'Date': [last_date + pd.Timedelta(days=1)],
    'Predicted_Close_Price': [predicted_price_value]
})

# Save as CSV
output_df.to_csv('predicted_price.csv', index=False)

# Download file in Colab
from google.colab import files
files.download('predicted_price.csv')

# Predict stock prices for the next 7 days
future_days = 7
last_60_days = scaled_data[-60:]
predicted_prices = []

for i in range(future_days):
    input_data = last_60_days[-60:]  # always last 60 points
    input_data = np.reshape(input_data, (1, input_data.shape[0], 1))

    next_pred = model.predict(input_data)[0][0]
    predicted_prices.append(next_pred)

    # Append this prediction to the last_60_days for next iteration
    last_60_days = np.append(last_60_days, [[next_pred]], axis=0)

# Inverse transform to original price scale
predicted_prices = scaler.inverse_transform(np.array(predicted_prices).reshape(-1, 1)).flatten()

# Prepare date range for next 7 days
last_date = data.index[-1]
future_dates = [last_date + pd.Timedelta(days=i+1) for i in range(future_days)]

# Save to DataFrame
output_df = pd.DataFrame({
    'Date': future_dates,
    'Predicted_Close_Price': predicted_prices
})

print(output_df)

# Save CSV
output_df.to_csv('predicted_7_days.csv', index=False)

# Download in Colab
from google.colab import files
files.download('predicted_7_days.csv')

# Predict stock prices for next 1 year (approx. 252 trading days)
future_days = 252
last_60_days = scaled_data[-60:]
predicted_prices = []

for i in range(future_days):
    input_data = last_60_days[-60:]  # last 60 data points
    input_data = np.reshape(input_data, (1, input_data.shape[0], 1))

    next_pred = model.predict(input_data)[0][0]
    predicted_prices.append(next_pred)

    # Add prediction to the input window
    last_60_days = np.append(last_60_days, [[next_pred]], axis=0)

# Convert predicted prices back to original scale
predicted_prices = scaler.inverse_transform(np.array(predicted_prices).reshape(-1, 1)).flatten()

# Generate future dates (weekdays only, since market is closed on weekends)
from pandas.tseries.offsets import BDay

last_date = data.index[-1]
future_dates = [last_date + BDay(i + 1) for i in range(future_days)]

# Save to DataFrame
output_df = pd.DataFrame({
    'Date': future_dates,
    'Predicted_Close_Price': predicted_prices
})

# Print first few rows
print(output_df.head())


output_df.to_csv('predicted_1_year.csv', index=False)


from google.colab import files
files.download('predicted_1_year.csv')

plt.figure(figsize=(12, 6))
plt.plot(output_df['Date'], output_df['Predicted_Close_Price'], label='Predicted')
plt.title(f"{ticker} Stock Price Forecast - 1 Year Ahead")
plt.xlabel("Date")
plt.ylabel("Predicted Close Price")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.savefig("predicted_1_year_plot.png")
files.download("predicted_1_year_plot.png")
plt.show()